
#include "../minishell.h"

void run(t_cmd_node *list, char **envp)
{
	char *full_path;

	full_path = find_path(list->cmd_args[0], envp);
//	printf("aaaaa   %s", full_path);
	if (execve(full_path, list->cmd_args, envp) == -1)
	{
		perror("fail");
	}
	
}

void run_fork(t_cmd_node *list, char **envp)
{
	char *full_path;
	int pid;

	full_path = find_path(list->cmd_args[0], envp);
	pid = fork();
	if (pid == 0)
	{
		if (execve(full_path, list->cmd_args, envp) == -1)
			{
				perror("fail");
			}
	}
	waitpid(pid, NULL, 0);
//	printf("aaaaa parent   %s", full_path);

}

// void run_child(t_data *data, t_cmd_node *list, char **envp)
// {

// }
void run_pipe(t_data *data, t_cmd_node *list, char **envp)
{
	char *full_path;
	int pid;
	int fds[2];
	// int out_fd;
	// int in_fd;

	if (list == NULL)
		return ;

	// if (check_if_buildin(data, list) == 1)
	// {
	// 	run_pipe(data, list->left, envp);
	// 	return ;
	// }
//	printf("%s\n", list->cmd_args[0]);
	if (list->left != NULL)
		// if (check_if_buildin(data, list) == 0)
		if (pipe(fds) == -1)
			panic("pipe err");
	pid = fork();
	if (pid == -1)
		panic("fork err");
	else if (pid == 0)
	{
		handle_redirects(list);
// 		if (check_if_buildin(data, list) == 0)
// //		perror("child");
// 		{
		// if (list->in_file != NULL)
		// {
		// 	in_fd = open(list->in_file, O_RDONLY);
		// 	if (in_fd == -1)
		// 		panic("infile");
		// 	if (dup2(in_fd, STDIN_FILENO) == -1)
		// 		panic("dup2");
		// 	close(in_fd);
		// }

		// 	if (list->out_file != NULL)
		// 	{
		// 		out_fd = open(list->out_file, O_WRONLY | O_CREAT | O_TRUNC, 0666);
		// 		if (out_fd == -1)
		// 			panic("outfile");
		// 		if(list->left != NULL)
		// 			close(fds[0]);

		// 		if (dup2(out_fd, STDOUT_FILENO) == -1)
		// 			panic("dup2");
		// 		close(out_fd);
		// 	}
			if (list->left != NULL)
			{
				close(fds[0]);
				if (dup2(fds[1], STDOUT_FILENO) == -1)
					panic("dup2");
				close(fds[1]);
			}
	        if (check_if_buildin(data, list) == 1)
			{
				// printf("buildin\n");
				free_data(data);

				exit(0);
			}
			else
			{
			full_path = find_path(list->cmd_args[0], envp);
//			printf("full_path  %s\n", full_path);
			if (execve(full_path, list->cmd_args, envp) == -1)
				panic("execve fail");
			free(full_path);
	free_data(data);
	free_node_2(list);
			}
//		}

	}
	else
	{
        if (ft_strncmp(list->cmd_args[0], "cd", 2) == 0)
			changedir(data, list);
		else
			waitpid(pid, NULL, 0);
		if (list->left != NULL)
		{
			// if (check_if_buildin(data, list) == 0)
			// {
				close(fds[1]);
				if (dup2(fds[0], STDIN_FILENO) == -1)
					panic("dup2");
				close(fds[0]);
//			}
		}
		if (list->left != NULL)
			run_pipe(data, list->left, envp);
	}
//	free_data(data);
}